professions           # Qualitative Nominale de type 'Factor'
revenu                # Quantitative de type 'Numeric'
niveau_domeram        # Qualitative Ordinale de type 'Ordinal Factor'
"Il est question de recoder ou factoriser des vecteurs ou variables"
class(nom_team_trash)
class(age)
class(sexe)
class(professions)
class(revenu) #
class(niveau_domeram)
help("factanal")
help("factor")
sexe <- factor(sexe, labels=("Femal", "Male")) # 0:F ; 1:M
sexe <- factor(sexe, labels=c("Femal", "Male")) # 0:F ; 1:M
class(sexe)
professions <- factor(professions)
niveau_domeram <- factor(niveau_domeram, labels=c("Saint",
"Un peu domeram",
"Domeram",
"Tres Domeram",
"TIaz"))
sexe
nlevels(sexe)
levels(sexe)
levels(niveau_domeram)
niveau_domeram <- factor(niveau_domeram, labels=c("Saint",
"Un peu domeram",
"Domeram",
"Tres Domeram",
"Tiaz"))
levels(niveau_domeram)
nlevels(niveau_domeram)
niveau_domeram <- factor(niveau_domeram,
labels=c("Saint",
"Un peu domeram",
"Domeram",
"Tres Domeram",
"Tiaz"),
ordered = TRUE)
levels(niveau_domeram)
nlevels(niveau_domeram)
class(niveau_domeram) # VARIBALE NUMERIC ET ENCODEE => DOIT ETRE FACTORISER & LABELLISEE
# My personal test ----
calcul_a_sum_b <- function(a, b){
return (a + b)
}
names(c(age, professions, sexe, revenu, niveau_domeram)) <- nom_team_trash
names(age) <- nom_team_trash
age
names(age) <- nom_team_trash
names(sexe) <- nom_team_trash
names(professions) <- nom_team_trash
names(revenu) <- nom_team_trash
names(niveau_domeram) <- nom_team_trash
niveau_domeram
names(niveau_domeram) <- nom_team_trash
niveau_domeram
niveau_domeram
age["Mohamed Toure"]
niveau_domeram["Ibrahima Sambe"]
revenu[c("Elimane Tine", "Ahmed Bachir Sarr")]
revenu[which(revevu >= mean(revenu))]
revenu[which(revenu >= mean(revenu))]
mean(revenu)
revenu[which(revenu >= mean(revenu))]
age[which(age >= mean(age))]
mean(age)
age[which(age = mean(age))]
age[which(age == mean(age))]
age[which(age <= mean(age))]
row.names(age) <- nom_team_trash
nom_team_trash <- c("Mohamed Toure", "Mouhamed Sarr", "Mouhamed Massaly", "Abdoul Aziz Gaye",
"Ahmed Bachir Sarr", "Abdoul Aziz Niang", "Ali Fofana", "Elimane Tine",
"Omar Gaye", "Ibrahima Sambe")
age <- c(24, 23, 24, 24, 21, 22, 21, 23, 23, 22)
#Variable encodee en binaire (0:F ; 1:M)
sexe <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
sexe[c(2,5,10)] <- 0
professions <- c("Instructeur", "Ouvrier", "Maçon", "Tiourayologue", "vendeur de parfum",
"Basketteur", "Influenceur", "Chef Tiourayologue", "Sapologue", "Tiaga")
revenu <- c(50000, 150000, 120000, 80000, 250000, 30000, 300000, 130000, 90000, 10000)
niveau_domeram <- c(1, 5, 5, 3, 4, 2, 1, 3, 3, 5)
" Signification des modalités de la variable 'niveau_domeram'
Les modalités de le niveau de domeram de team_trash (Echelle de Likert) :
1 : Saint
2 : un peu domeram
3 : domeram
4 : tres domeram
5 : tiaz
"
nom_team_trash        # Qualitative Nominale de type 'Character'
age                   # Quantitative de type 'Numeric'
sexe                  # Qualitative Nominale de type 'Factor'
professions           # Qualitative Nominale de type 'Factor'
revenu                # Quantitative de type 'Numeric'
niveau_domeram        # Qualitative Ordinale de type 'Ordered Factor'
"Il est question de recoder ou factoriser des vecteurs ou variables"
class(nom_team_trash)
class(age)
class(sexe)           # VARIBALE NUMERIC ET ENCODEE => DOIT ETRE FACTORISER & LABELLISEE
class(professions)    # TYPE CHARACTER => DOIT ETRE FACTORISER
class(revenu)
class(niveau_domeram) # VARIBALE NUMERIC ET ENCODEE => DOIT ETRE FACTORISER & LABELLISEE
### Factoriser et Labelliser
"levels() == modalites => nlevels() == nombres de modalites"
sexe <- factor(sexe, labels=c("Femal", "Male")) # 0:F ; 1:M
professions <- factor(professions)
niveau_domeram <- factor(niveau_domeram,
labels=c("Saint",
"Un peu domeram",
"Domeram",
"Tres Domeram",
"Tiaz"),
ordered = TRUE)
levels(niveau_domeram)
nlevels(niveau_domeram)
### Changer (mettre) un nom de colonne (vecteur)
names(age) <- 'age'
names(sexe) <- 'sexe'
names(professions) <- 'professions'
names(revenu) <- 'revenu'
names(niveau_domeram) <- 'niveau_domeram'
row.names(age) <- nom_team_trash
row.names(sexe) <- nom_team_trash
row.names(professions) <- nom_team_trash
team_trash <- data.frame('Age' = age, "Sexe" = sexe, "Revenu" = revenu, "Profession" = professions,
"Niveau_domeram" = niveau_domeram)
team_trash
`row.names<-`(nom_team_trash)
row.names<-(nom_team_trash)
team_trash
team_trash
row.names
row.names(team_trash)<-(nom_team_trash)
team_trash
revenu[which(revenu == max(revenu))]
max(revenu)
revenu[which(revenu == max(revenu))]
revenu[which(revenu >= mean(revenu))]
names(age) <- nom_team_trash
names(sexe) <- nom_team_trash
names(professions) <- nom_team_trash
names(revenu) <- nom_team_trash
names(niveau_domeram) <- nom_team_trash
revenu[which(revenu == max(revenu))]
factoriel_nombre <- function(n, resultat = 1){
for (i in seq(n)){
if (n == 0){
return (1)
}else{
resultat = resultat * i
}
}
return (resultat)
}
n = as.numeric(readline("Entrez le nombre : "))
fact = factoriel_nombre(n)
cat(paste("Factoriel de n", n, "\n", fact))
factoriel_nombre <- function(n, resultat = 1){
for (i in seq(n)){
if (n == 0){
return (1)
}else{
resultat = resultat * i
}
}
return (resultat)
}
n = as.numeric(readline("Entrez le nombre : "))
fact = factoriel_nombre(n)
cat(paste("Factoriel de", n, "\n", fact))
## Création et manipulation des matrices
# Dim Matrice (4x2) == taille vecteur(8)
matrix(1:8, nrow = 4, ncol = 2)
matrix(1:20, nrow = 5, ncol = 4, byrow = TRUE)
matrix(1:20, nrow = 4, ncol = 3)
matrix(1:20, nrow = 4, ncol = 3)
matrix(1:20, nrow = 4, ncol = 3)
m<-matrix(1:20, nrow = 4, ncol = 3)
m
m2<-matrix(1:20, nrow = 5, ncol = 5, byrow = TRUE)
m2
M <- matrix(1:20, nrow = 4, ncol = 5, byrow = TRUE)
dim(M)
nrow(M)
ncol(M)
t(M)
diag(M)
det(M)
M1 <- matrix(c(5,6,-1,8), nrow = 2, ncol = 2, byrow = TRUE)
det(M)
M1 <- matrix(c(5,6,-1,8), nrow = 2, byrow = TRUE)
det(M)
M1 <- matrix(c(5,6,-1,8), nrow = 2)
det(M)
det(M1)
x <- matrix(1:4, nrow = 2)
y <- matrix(c(7,9,11,13), nrow = 2)
x * y
x <- matrix(1:4, nrow = 2)
y <- matrix(c(7,9,11,13), nrow = 2)
x + y
x - y
x * y # Il s'agit d'une multiplication membre a membre et non une multiplication matricielle
x %*% y # Il s'agit d'une multiplication matricielle ATTENTION : colonne matrice 1 == ligne matrice 2
x
5 * x
x <- seq(10, 200, by = 10)
length(x)
A <- matrix(x, nrow = 4, ncol = 5)
A[1, ] # Première ligne
A
A[1,] # Première ligne
A[,3] # 3e colonne
A[-4,] #Supprimer 4e ligne
A[ ,-5] # Supprimer 5e colonne
A[4,2]
A[c(1,4), 2]
A[c(1,4), 2] # Recupere les elements [1,2] et [4,2]
rownames(A) <- c["L1", "L2", "L3", "L4"]
rownames(A) <- c("L1", "L2", "L3", "L4")
A
row.names(A) <- c("L1", "L2", "L3", "L4")
A
colnames(A) <- c("Col1", "Col2", "Col3", "Col4", "Col5")
A
M1 <- matrix(1:4, nrow = 2, ncol = 2)
M2 <- matrix(c(5,6,7,8), nrow = 2, ncol = 2)
M1
M2
#### Fusionner par lignes
rbind(M1, M2)
#### Fusionner par colonnes
cbind(M1, M2)
nom_team_trash <- c("Mohamed Toure", "Mouhamed Sarr", "Mouhamed Massaly", "Abdoul Aziz Gaye",
"Ahmed Bachir Sarr", "Abdoul Aziz Niang", "Ali Fofana", "Elimane Tine",
"Omar Gaye", "Ibrahima Sambe")
age <- c(24, 23, 24, 24, 21, 22, 21, 23, 23, 22)
#Variable encodee en binaire (0:F ; 1:M)
sexe <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
sexe[c(2,5,10)] <- 0
professions <- c("Instructeur", "Ouvrier", "Maçon", "Tiourayologue", "vendeur de parfum",
"Basketteur", "Influenceur", "Chef Tiourayologue", "Sapologue", "Tiaga")
revenu <- c(50000, 150000, 120000, 80000, 250000, 30000, 300000, 130000, 90000, 10000)
niveau_domeram <- c(1, 5, 5, 3, 4, 2, 1, 3, 3, 5)
" Signification des modalités de la variable 'niveau_domeram'
Les modalités de le niveau de domeram de team_trash (Echelle de Likert) :
1 : Saint
2 : un peu domeram
3 : domeram
4 : tres domeram
5 : tiaz
"
nom_team_trash        # Qualitative Nominale de type 'Character'
age                   # Quantitative de type 'Numeric'
sexe                  # Qualitative Nominale de type 'Factor'
professions           # Qualitative Nominale de type 'Factor'
revenu                # Quantitative de type 'Numeric'
niveau_domeram        # Qualitative Ordinale de type 'Ordered Factor'
"Il est question de recoder ou factoriser des vecteurs ou variables"
class(nom_team_trash)
class(age)
class(sexe)           # VARIBALE NUMERIC ET ENCODEE => DOIT ETRE FACTORISER & LABELLISEE
class(professions)    # TYPE CHARACTER => DOIT ETRE FACTORISER
class(revenu)
class(niveau_domeram) # VARIBALE NUMERIC ET ENCODEE => DOIT ETRE FACTORISER & LABELLISEE
### Factoriser et Labelliser
"levels() == modalites => nlevels() == nombres de modalites"
sexe <- factor(sexe, labels=c("Femal", "Male")) # 0:F ; 1:M
professions <- factor(professions)
niveau_domeram <- factor(niveau_domeram,
labels=c("Saint",
"Un peu domeram",
"Domeram",
"Tres Domeram",
"Tiaz"),
ordered = TRUE)
levels(niveau_domeram)
nlevels(niveau_domeram)
names(age) <- nom_team_trash
names(sexe) <- nom_team_trash
names(professions) <- nom_team_trash
names(revenu) <- nom_team_trash
names(niveau_domeram) <- nom_team_trash
age["Mohamed Toure"]
niveau_domeram["Ibrahima Sambe"]
revenu[c("Elimane Tine", "Ahmed Bachir Sarr")]
mean(revenu)
revenu[which(revenu >= mean(revenu))]
mean(age)
age[which(age <= mean(age))]
revenu[which(revenu == max(revenu))]
team_trash <- data.frame('Age' = age, "Sexe" = sexe, "Revenu" = revenu, "Profession" = professions,
"Niveau_domeram" = niveau_domeram)
row.names(team_trash)<-(nom_team_trash)
View(team_trash)
# dataframe in R
data()
data("mtcars")
force(mtcars)
View(mtcars)
# dataframe in R
data()
data("mtcars")
View(mtcars)
View(mtcars)
?mtcars
str(mtcars)
# .dta (STATA)
# .sav (SPSS)
library(haven)
install.packages("haven")
install.packages("haven")
# .dta (STATA)
# .sav (SPSS)
library(haven) # Tools -> install library -> haven
data_tabaski_from_spss <- read_sav("data/Tabaski_Novembre_2016.sav")
View(data_tabaski_from_spss)
View(data_tabaski_from_spss)
# .dta (STATA)
# .sav (SPSS)
installed.packages("haven", dependencies = T)
library(haven) # Tools -> install library -> haven
data_tabaski_from_spss <- read_sav("data/Tabaski_Novembre_2016.sav")
library(haven) # Tools -> install library -> haven
data_tabaski_from_spss <- read_sav("data/Tabaski_Novembre_2016.sav")
View(data_tabaski_from_spss)
# read.csv pour un fichier de séparateur <,>
car_insurance <- read.csv(file = "data/car_insurance.csv",
header = TRUE,
sep = ',',
dec = '.')
View(car_insurance)
View(car_insurance)
View(data_tabaski_from_spss)
# read.csv pour un fichier de séparateur <,>
car_insurance <- read.csv(file = "data/car_insurance.csv",
header = TRUE,
sep = ',',
dec = '.')
# read.csv2 pour un fichier de séparateur <;>
cardio_vascular <- read.csv2(file = "data/cardio_vascular_diseases.csv",
header = TRUE,
sep = ';',
dec = '.')
View(cardio_vascular)
# STRUCTURE
str(cardio_vascular)
sample(1:10, 5)
index <- sample(1:nrow(cardio_vascular), 10000)
index
set.seed(123) # Fixer une graine aleatoire
index <- sample(1:nrow(cardio_vascular), 10000)
# ATTENTION : EXECUTER LES 2 LIGNES EN MM TEMPS
set.seed(123) # Fixer une graine aleatoire
index <- sample(1:nrow(cardio_vascular), 10000)
# ATTENTION : EXECUTER LES 2 LIGNES EN MM TEMPS
set.seed(123) # Fixer une graine aleatoire
index <- sample(1:nrow(cardio_vascular), 10000)
# Stockage de l'echantillon
cardio_vascular_tb1 <- cardio_vascular[index,]
View(cardio_vascular_tb1)
View(cardio_vascular_tb1)
cardio_vascular_tb1$gender <- factor(cardio_vascular_tb1$gender,
labels = c('Normal', 'Above Normal', 'Well above Normal')
ordered = TRUE)
cardio_vascular_tb1$gender <- factor(cardio_vascular_tb1$gender,
labels = c('Normal', 'Above Normal', 'Well above Normal'),
ordered = TRUE)
cardio_vascular_tb1$gender <- factor(cardio_vascular_tb1$gender,
labels = c('Female', 'Male'))
cardio_vascular_tb1$cholesterol <- fact(cardio_vascular_tb1$cholesterol,
labels = c("Normal", "Above Normal", "Well above Normal"),
ordered = TRUE)
cardio_vascular_tb1$cholesterol <- factor(cardio_vascular_tb1$cholesterol,
labels = c("Normal", "Above Normal", "Well above Normal"),
ordered = TRUE)
cardio_vascular_tb1$gluc <- factor(cardio_vascular_tb1$gluc,
labels = c("Normal", "Above Normal", "Well above Normal"),
ordered = TRUE)
class(cardio_vascular_tb1$gender)
class(cardio_vascular_tb1$cholesterol)
class(cardio_vascular_tb1$gluc)
cardio_vascular_tb1$gender <- factor(cardio_vascular_tb1$gender,
labels = c('Female', 'Male'))
cardio_vascular_tb1$cholesterol <- factor(cardio_vascular_tb1$cholesterol,
labels = c("Normal", "Above Normal", "Well above Normal"),
ordered = TRUE)
cardio_vascular_tb1$gluc <- factor(cardio_vascular_tb1$gluc,
labels = c("Normal", "Above Normal", "Well above Normal"),
ordered = TRUE)
cardio_vascular_tb1$smoke <- factor(cardio_vascular_tb1$smoke,
labels = c("No", "Yes"))
cardio_vascular_tb1$alco <- factor(cardio_vascular_tb1$alco,
labels = c("No", "Yes"))
cardio_vascular_tb1$active <- factor(cardio_vascular_tb1$active,
labels = c("No", "Yes"))
cardio_vascular_tb1$cardio <- factor(cardio_vascular_tb1$cardio,
labels = c("No", "Yes"))
mean(cardio_vascular_tb1$age)
# On met l'age (en jour) en age par années
cardio_vascular_tb1$age <- round(cardio_vascular_tb1$age / 365)
mean(cardio_vascular_tb1$age)
# Médiane (Indice de position)
median(cardio_vascular_tb1$age)
# Ecart Type (Indice de dispersion)
sd(cardio_vascular_tb1$age)
# Les quartiles
# Avec min et max aux extrémités # Les quartiles sont des quantiles d'ordre i
quantile(cardio_vascular_tb1$age)
# Répartition des sexes chez les individus (effectif)
table(cardio_vascular_tb1$gender)
percent <- prop.table(tab)
tab <- table(table(cardio_vascular_tb1$gender))
percent <- prop.table(tab)
percent
percent <- prop.table(tab) * 100
percent
# Répartition des sexes chez les individus (effectif)
table(cardio_vascular_tb1$gender)
prop.table(tab)
# importation du fichier cardio_vascular_diseases.csv avec read.csv2 pour un fichier de séparateur <;>
cardio_vascular <- read.csv2(file = "data/cardio_vascular_diseases.csv",
header = TRUE,
sep = ';',
dec = '.')
# STRUCTURE
str(cardio_vascular)
"
id  < Normal
age < Normal, en jours >
gender < 2 : Femme; 1 : Homme > < Need Factor and Label >
height < Normal, en cm>
weight < Normal, en kg>
ap_hi < Normal >
ap_lo < Normal >
Cholesterol < 1 : Normal, 2 : Above Normal, 3 : Well above Normal > < Need Factor, Label, order >
gluc < 1 : Normal, 2 : Above Normal, 3 : Well above Normal > < Need Factor, Label, order >
smoke ...
"
# ATTENTION : EXECUTER LES 2 LIGNES EN MM TEMPS
set.seed(123) # Fixer une graine aléatoire
index <- sample(1:nrow(cardio_vascular), 10000)
# Stockage de l’échantillon
cardio_vascular_tb1 <- cardio_vascular[index,]
cardio_vascular_tb1$gender <- factor(cardio_vascular_tb1$gender,
labels = c('Female', 'Male'))
cardio_vascular_tb1$cholesterol <- factor(cardio_vascular_tb1$cholesterol,
labels = c("Normal", "Above Normal", "Well above Normal"),
ordered = TRUE)
cardio_vascular_tb1$gluc <- factor(cardio_vascular_tb1$gluc,
labels = c("Normal", "Above Normal", "Well above Normal"),
ordered = TRUE)
cardio_vascular_tb1$smoke <- factor(cardio_vascular_tb1$smoke,
labels = c("No", "Yes"))
cardio_vascular_tb1$alco <- factor(cardio_vascular_tb1$alco,
labels = c("No", "Yes"))
cardio_vascular_tb1$active <- factor(cardio_vascular_tb1$active,
labels = c("No", "Yes"))
cardio_vascular_tb1$cardio <- factor(cardio_vascular_tb1$cardio,
labels = c("No", "Yes"))
# On met l'age (en jour) en age par années
cardio_vascular_tb1$age <- round(cardio_vascular_tb1$age / 365)
"Varibale univariee : variable continue = distribution
Variable univariee : variable qualitative = repartition"
# Moyenne (Indice de position)
mean(cardio_vascular_tb1$age) # On fait un approximation par défaut (53 ans)
# Médiane (Indice de position)
median(cardio_vascular_tb1$age) # Médiane = 54
# Ecart Type (Indice de dispersion)
sd(cardio_vascular_tb1$age) # ecart type = 6.69
# Les quartiles
# Avec min et max aux extrémités # Les quartiles sont des quantiles d'ordre i (25% , 50%, 75%)
quantile(cardio_vascular_tb1$age)
# Répartition des sexes chez les individus (effectif)
table(cardio_vascular_tb1$gender)
tab <- table(table(cardio_vascular_tb1$gender))
percent <- prop.table(tab) * 100
tab
tab <- table(cardio_vascular_tb1$gender))
tab <- table(cardio_vascular_tb1$gender)
percent <- prop.table(tab) * 100
tab
percent
prop.table(tab)
table(cardio_vascular_tb1$smoke == "Yes")
# Combien y a t il d'individus atteint de maladie cardio
table(cardio_vascular_tb1$cardio == "Yes")
summary(cardio_vascular_tb1)[:-1]
summary(cardio_vascular_tb1)[ :-1]
summary(cardio_vascular_tb1)[ :-,1]
summary(cardio_vascular_tb1)[ ,-1]
install.packages("prettyR", dependencies = T)
install.packages("prettyR", dependencies = T)
#install.packages("prettyR", dependencies = T)
library(prettyR)
describe(cardio_vascular_tb1[, -1],
num.desc = c("mean", "sd", "median", "min", "max", "valid.n"))
# Importation d'une base de donnees (Data Frame) dans R
# Importer une base propre à R
data() # Affiche tous les data frames propres a R
data("mtcars") # Importation du data frame "mtcars"
force(mtcars)
View(mtcars)
?mtcars # Infos sur le data frame
str(mtcars) # Structure de la base de donnees
### Importer une base d'extension particulière
#installed.packages("haven", dependencies = T)
library(haven)
data_credi_from_stata <- read_dta("data/credit.dta")
installed.packages("readxl", dependencies = T)
library("readxl")
